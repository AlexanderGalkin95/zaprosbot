import sqlite3
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
import schedule
import time
import threading
import re
from datetime import datetime
from dotenv import load_dotenv
import os
import logging
from logging.handlers import RotatingFileHandler

log_handler = RotatingFileHandler('bot.log', maxBytes=5 * 1024 * 1024, backupCount=3, encoding='utf-8')
log_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(log_handler)

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
EMPLOYEE_CHAT_ID = os.getenv("EMPLOYEE_CHAT_ID")
REMINDER_TIME = os.getenv("REMINDER_TIME", "09:00")
REMINDER_COUNT = int(os.getenv("REMINDER_COUNT", 1))
REMINDER_DAYS = int(os.getenv("REMINDER_DAYS", 1))

if not TELEGRAM_TOKEN or not EMPLOYEE_CHAT_ID:
    logger.error("TELEGRAM_TOKEN –∏–ª–∏ EMPLOYEE_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
    exit(1)

def init_db():
    try:
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS requests
                     (id INTEGER PRIMARY KEY AUTOINCREMENT, submission_date TEXT, company TEXT, name TEXT, address TEXT, 
                      contact_number TEXT, track_number TEXT, status TEXT, chat_id TEXT, received INTEGER DEFAULT 0)''')
        c.execute('''CREATE TABLE IF NOT EXISTS electronic_requests
                     (id INTEGER PRIMARY KEY AUTOINCREMENT, submission_date TEXT, company TEXT, iin TEXT, documents TEXT, 
                      delivery_method TEXT, status TEXT, chat_id TEXT, attachment TEXT)''')
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

MAIN_MENU = ReplyKeyboardMarkup([
    [KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")],
    [KeyboardButton("–ü–æ–º–æ—â—å"), KeyboardButton("–û—Ç–º–µ–Ω–∞")]
], resize_keyboard=True)

def send_telegram_message(chat_id, text, context, reply_markup=MAIN_MENU):
    try:
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}: {text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def validate_phone(phone):
    return re.match(r'^\+?\d{10,15}$', phone) is not None

def start(update, context):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.message.chat_id}")
    send_telegram_message(update.message.chat_id,
                          "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ZaprosBot. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                          "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n"
                          "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                          "‚ÑπÔ∏è –ü–æ–º–æ—â—å", context)

def handle_message(update, context):
    message_text = update.message.text
    chat_id = update.message.chat_id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {message_text}")

    if message_text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
        context.user_data['step'] = 'document_type'
        send_telegram_message(chat_id,
                              "üìù –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–∞–º –Ω—É–∂–Ω—ã?\n1. –û—Ä–∏–≥–∏–Ω–∞–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n2. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç",
                              context,
                              reply_markup=ReplyKeyboardMarkup([
                                  [KeyboardButton("–û—Ä–∏–≥–∏–Ω–∞–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"), KeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")],
                                  [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
                              ], resize_keyboard=True))
    elif message_text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
        try:
            conn = sqlite3.connect('database.db')
            c = conn.cursor()
            c.execute("SELECT company, status, track_number FROM requests WHERE chat_id = ?", (str(chat_id),))
            requests = c.fetchall()
            c.execute("SELECT company, status, delivery_method FROM electronic_requests WHERE chat_id = ?", (str(chat_id),))
            electronic_requests = c.fetchall()
            conn.close()
            response = "üìã –¢–≤–æ–∏ –∑–∞—è–≤–∫–∏:\n"
            if requests:
                response += "–û—Ä–∏–≥–∏–Ω–∞–ª—ã:\n"
                for req in requests:
                    company, status, track_number = req
                    response += f"üè¢ {company}: {status} (–¢—Ä–µ–∫: {track_number or '–ù–µ—Ç'})\n"
            if electronic_requests:
                response += "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ:\n"
                for req in electronic_requests:
                    company, status, delivery_method = req
                    response += f"üè¢ {company}: {status} (–°–ø–æ—Å–æ–±: {delivery_method})\n"
            if not requests and not electronic_requests:
                response = "ü§∑ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫."
            send_telegram_message(chat_id, response, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            send_telegram_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.", context)
    elif message_text == "–ü–æ–º–æ—â—å":
        send_telegram_message(chat_id,
                              "‚ÑπÔ∏è –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
                              "üìù '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' ‚Äî –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.\n"
                              "‚úÖ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å' ‚Äî —É–∑–Ω–∞–π —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫.\n"
                              "üö™ '–û—Ç–º–µ–Ω–∞' ‚Äî –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é.", context)
    elif message_text == "–û—Ç–º–µ–Ω–∞":
        context.user_data.clear()
        send_telegram_message(chat_id, "üö™ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é!", context)
    elif 'step' in context.user_data:
        step = context.user_data['step']
        if step == 'document_type':
            if message_text == "–û—Ä–∏–≥–∏–Ω–∞–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
                context.user_data['document_type'] = 'original'
                context.user_data['step'] = 'company'
                send_telegram_message(chat_id,
                                      "üìù –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∑–∞—è–≤–∫—É! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
                                      context,
                                      reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
            elif message_text == "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç":
                context.user_data['document_type'] = 'electronic'
                context.user_data['step'] = 'company_electronic'
                send_telegram_message(chat_id,
                                      "üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
                                      context,
                                      reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
        # –û—Ä–∏–≥–∏–Ω–∞–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        elif step == 'company':
            context.user_data['company'] = message_text
            context.user_data['step'] = 'name'
            send_telegram_message(chat_id,
                                  f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {message_text}\nüë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
                                  context,
                                  reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
        elif step == 'name':
            context.user_data['name'] = message_text
            context.user_data['step'] = 'address'
            send_telegram_message(chat_id,
                                  f"üë§ –§–ò–û: {message_text}\nüìç –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
                                  context,
                                  reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
        elif step == 'address':
            context.user_data['address'] = message_text
            context.user_data['step'] = 'contact_number'
            send_telegram_message(chat_id,
                                  f"üìç –ê–¥—Ä–µ—Å: {message_text}\nüìû –í–≤–µ–¥–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:",
                                  context,
                                  reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
        elif step == 'contact_number':
            if validate_phone(message_text):
                context.user_data['contact_number'] = message_text
                context.user_data['step'] = 'confirm'
                confirmation_text = (
                    "üìã –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
                    f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {context.user_data['company']}\n"
                    f"üë§ –§–ò–û: {context.user_data['name']}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {context.user_data['address']}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['contact_number']}\n"
                    "–í—Å—ë –≤–µ—Ä–Ω–æ?"
                )
                inline_keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data='confirm_yes'),
                     InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='confirm_no')]
                ])
                context.bot.send_message(chat_id=chat_id, text=confirmation_text, reply_markup=inline_keyboard)
            else:
                send_telegram_message(chat_id, "üìû –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:", context)
        # –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        elif step == 'company_electronic':
            context.user_data['company'] = message_text
            context.user_data['step'] = 'iin'
            send_telegram_message(chat_id,
                                  f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {message_text}\nüìë –í–≤–µ–¥–∏ –ò–ò–ù –∫–æ–º–ø–∞–Ω–∏–∏:",
                                  context,
                                  reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
        elif step == 'iin':
            context.user_data['iin'] = message_text
            context.user_data['step'] = 'documents'
            send_telegram_message(chat_id,
                                  f"üìë –ò–ò–ù: {message_text}\nüìú –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?",
                                  context,
                                  reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
        elif step == 'documents':
            context.user_data['documents'] = message_text
            context.user_data['step'] = 'delivery_method'
            send_telegram_message(chat_id,
                                  f"üìú –î–æ–∫—É–º–µ–Ω—Ç—ã: {message_text}\nüì§ –ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?\n1. –≠–î–û\n2. –í —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ",
                                  context,
                                  reply_markup=ReplyKeyboardMarkup([
                                      [KeyboardButton("–≠–î–û"), KeyboardButton("–í —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ")],
                                      [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
                                  ], resize_keyboard=True))
        elif step == 'delivery_method':
            if message_text in ["–≠–î–û", "–í —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ"]:
                context.user_data['delivery_method'] = message_text
                context.user_data['step'] = 'confirm_electronic'
                confirmation_text = (
                    "üìã –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
                    f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {context.user_data['company']}\n"
                    f"üìë –ò–ò–ù: {context.user_data['iin']}\n"
                    f"üìú –î–æ–∫—É–º–µ–Ω—Ç—ã: {context.user_data['documents']}\n"
                    f"üì§ –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {context.user_data['delivery_method']}\n"
                    "–í—Å—ë –≤–µ—Ä–Ω–æ?"
                )
                inline_keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data='confirm_yes_electronic'),
                     InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='confirm_no_electronic')]
                ])
                context.bot.send_message(chat_id=chat_id, text=confirmation_text, reply_markup=inline_keyboard)
            else:
                send_telegram_message(chat_id, "üì§ –í—ã–±–µ—Ä–∏—Ç–µ '–≠–î–û' –∏–ª–∏ '–í —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ':", context)

def handle_callback(update, context):
    query = update.callback_query
    chat_id = query.message.chat_id
    data = query.data
    logger.info(f"Callback –æ—Ç {chat_id}: {data}")

    if data == 'confirm_yes' and context.user_data.get('step') == 'confirm':
        try:
            conn = sqlite3.connect('database.db')
            c = conn.cursor()
            submission_date = datetime.now().strftime('%d.%m.%Y %H:%M')
            c.execute(
                "INSERT INTO requests (submission_date, company, name, address, contact_number, status, chat_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (submission_date, context.user_data['company'], context.user_data['name'],
                 context.user_data['address'], context.user_data['contact_number'], '–ù–æ–≤–∞—è', str(chat_id)))
            conn.commit()
            conn.close()
            send_telegram_message(chat_id,
                                  f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–ª—è {context.user_data['company']} —Å–æ–∑–¥–∞–Ω–∞!\n–°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è",
                                  context)
            send_telegram_message(EMPLOYEE_CHAT_ID,
                                  f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—ã) –æ—Ç {context.user_data['company']} ({submission_date})",
                                  context)
            context.user_data.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            send_telegram_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.", context)
    elif data == 'confirm_no' and context.user_data.get('step') == 'confirm':
        context.user_data['step'] = 'company'
        send_telegram_message(chat_id,
                              "üìù –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
                              context,
                              reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    elif data == 'confirm_yes_electronic' and context.user_data.get('step') == 'confirm_electronic':
        try:
            conn = sqlite3.connect('database.db')
            c = conn.cursor()
            submission_date = datetime.now().strftime('%d.%m.%Y %H:%M')
            c.execute(
                "INSERT INTO electronic_requests (submission_date, company, iin, documents, delivery_method, status, chat_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (submission_date, context.user_data['company'], context.user_data['iin'],
                 context.user_data['documents'], context.user_data['delivery_method'], '–ù–æ–≤–∞—è', str(chat_id)))
            conn.commit()
            conn.close()
            send_telegram_message(chat_id,
                                  f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–ª—è {context.user_data['company']} —Å–æ–∑–¥–∞–Ω–∞!\n–°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è",
                                  context)
            send_telegram_message(EMPLOYEE_CHAT_ID,
                                  f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è) –æ—Ç {context.user_data['company']} ({submission_date})",
                                  context)
            context.user_data.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            send_telegram_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.", context)
    elif data == 'confirm_no_electronic' and context.user_data.get('step') == 'confirm_electronic':
        context.user_data['step'] = 'company_electronic'
        send_telegram_message(chat_id,
                              "üìù –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
                              context,
                              reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    query.answer()

def check_reminders():
    try:
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("SELECT company, submission_date, status, chat_id FROM requests WHERE status != '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'")
        for req in c.fetchall():
            company, submission_date, status, chat_id = req
            submission_datetime = datetime.strptime(submission_date, '%d.%m.%Y %H:%M')
            days_since = (datetime.now() - submission_datetime).days
            if days_since >= REMINDER_DAYS:
                message = f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—ã): –∑–∞—è–≤–∫–∞ –æ—Ç {company} ({submission_date}) ‚Äî {status}"
                send_telegram_message(EMPLOYEE_CHAT_ID, message, None)
        c.execute("SELECT company, submission_date, status, chat_id FROM electronic_requests WHERE status != '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'")
        for req in c.fetchall():
            company, submission_date, status, chat_id = req
            submission_datetime = datetime.strptime(submission_date, '%d.%m.%Y %H:%M')
            days_since = (datetime.now() - submission_datetime).days
            if days_since >= REMINDER_DAYS:
                message = f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞ (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ): –∑–∞—è–≤–∫–∞ –æ—Ç {company} ({submission_date}) ‚Äî {status}"
                send_telegram_message(EMPLOYEE_CHAT_ID, message, None)
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

def run_scheduler():
    for _ in range(REMINDER_COUNT):
        schedule.every().day.at(REMINDER_TIME).do(check_reminders)
    while True:
        schedule.run_pending()
        time.sleep(60)

def main():
    init_db()
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CallbackQueryHandler(handle_callback))
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    threading.Thread(target=run_scheduler, daemon=True).start()
    updater.idle()

if __name__ == '__main__':
    main()